# Generated from /home/tibov/Desktop/universiteit/bachlor-2/Compilers/Project/Compilers/grammar/grammarC.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,333,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,267,8,45,10,45,12,45,
        270,9,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,279,8,46,10,46,
        12,46,282,9,46,1,47,3,47,285,8,47,1,47,5,47,288,8,47,10,47,12,47,
        291,9,47,1,48,1,48,5,48,295,8,48,10,48,12,48,298,9,48,1,48,3,48,
        301,8,48,1,49,1,49,5,49,305,8,49,10,49,12,49,308,9,49,1,49,1,49,
        1,49,5,49,313,8,49,10,49,12,49,316,9,49,3,49,318,8,49,1,50,1,50,
        3,50,322,8,50,1,50,1,50,1,50,1,51,4,51,328,8,51,11,51,12,51,329,
        1,51,1,51,2,268,321,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,1,
        0,6,1,0,10,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,343,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
        0,0,1,105,1,0,0,0,3,107,1,0,0,0,5,126,1,0,0,0,7,128,1,0,0,0,9,130,
        1,0,0,0,11,132,1,0,0,0,13,134,1,0,0,0,15,142,1,0,0,0,17,145,1,0,
        0,0,19,150,1,0,0,0,21,157,1,0,0,0,23,159,1,0,0,0,25,162,1,0,0,0,
        27,165,1,0,0,0,29,168,1,0,0,0,31,171,1,0,0,0,33,174,1,0,0,0,35,176,
        1,0,0,0,37,182,1,0,0,0,39,186,1,0,0,0,41,191,1,0,0,0,43,197,1,0,
        0,0,45,199,1,0,0,0,47,201,1,0,0,0,49,204,1,0,0,0,51,207,1,0,0,0,
        53,209,1,0,0,0,55,211,1,0,0,0,57,213,1,0,0,0,59,215,1,0,0,0,61,217,
        1,0,0,0,63,219,1,0,0,0,65,221,1,0,0,0,67,224,1,0,0,0,69,227,1,0,
        0,0,71,229,1,0,0,0,73,231,1,0,0,0,75,234,1,0,0,0,77,237,1,0,0,0,
        79,240,1,0,0,0,81,243,1,0,0,0,83,245,1,0,0,0,85,247,1,0,0,0,87,250,
        1,0,0,0,89,253,1,0,0,0,91,262,1,0,0,0,93,274,1,0,0,0,95,284,1,0,
        0,0,97,300,1,0,0,0,99,317,1,0,0,0,101,319,1,0,0,0,103,327,1,0,0,
        0,105,106,5,59,0,0,106,2,1,0,0,0,107,108,5,35,0,0,108,109,5,105,
        0,0,109,110,5,110,0,0,110,111,5,99,0,0,111,112,5,108,0,0,112,113,
        5,117,0,0,113,114,5,100,0,0,114,115,5,101,0,0,115,116,5,32,0,0,116,
        117,5,60,0,0,117,118,5,115,0,0,118,119,5,116,0,0,119,120,5,100,0,
        0,120,121,5,105,0,0,121,122,5,111,0,0,122,123,5,46,0,0,123,124,5,
        104,0,0,124,125,5,62,0,0,125,4,1,0,0,0,126,127,5,40,0,0,127,6,1,
        0,0,0,128,129,5,41,0,0,129,8,1,0,0,0,130,131,5,123,0,0,131,10,1,
        0,0,0,132,133,5,125,0,0,133,12,1,0,0,0,134,135,5,116,0,0,135,136,
        5,121,0,0,136,137,5,112,0,0,137,138,5,101,0,0,138,139,5,100,0,0,
        139,140,5,101,0,0,140,141,5,102,0,0,141,14,1,0,0,0,142,143,5,105,
        0,0,143,144,5,102,0,0,144,16,1,0,0,0,145,146,5,101,0,0,146,147,5,
        108,0,0,147,148,5,115,0,0,148,149,5,101,0,0,149,18,1,0,0,0,150,151,
        5,112,0,0,151,152,5,114,0,0,152,153,5,105,0,0,153,154,5,110,0,0,
        154,155,5,116,0,0,155,156,5,102,0,0,156,20,1,0,0,0,157,158,5,34,
        0,0,158,22,1,0,0,0,159,160,5,37,0,0,160,161,5,115,0,0,161,24,1,0,
        0,0,162,163,5,37,0,0,163,164,5,100,0,0,164,26,1,0,0,0,165,166,5,
        37,0,0,166,167,5,120,0,0,167,28,1,0,0,0,168,169,5,37,0,0,169,170,
        5,102,0,0,170,30,1,0,0,0,171,172,5,37,0,0,172,173,5,99,0,0,173,32,
        1,0,0,0,174,175,5,44,0,0,175,34,1,0,0,0,176,177,5,99,0,0,177,178,
        5,111,0,0,178,179,5,110,0,0,179,180,5,115,0,0,180,181,5,116,0,0,
        181,36,1,0,0,0,182,183,5,105,0,0,183,184,5,110,0,0,184,185,5,116,
        0,0,185,38,1,0,0,0,186,187,5,99,0,0,187,188,5,104,0,0,188,189,5,
        97,0,0,189,190,5,114,0,0,190,40,1,0,0,0,191,192,5,102,0,0,192,193,
        5,108,0,0,193,194,5,111,0,0,194,195,5,97,0,0,195,196,5,116,0,0,196,
        42,1,0,0,0,197,198,5,42,0,0,198,44,1,0,0,0,199,200,5,61,0,0,200,
        46,1,0,0,0,201,202,5,43,0,0,202,203,5,43,0,0,203,48,1,0,0,0,204,
        205,5,45,0,0,205,206,5,45,0,0,206,50,1,0,0,0,207,208,5,38,0,0,208,
        52,1,0,0,0,209,210,5,43,0,0,210,54,1,0,0,0,211,212,5,45,0,0,212,
        56,1,0,0,0,213,214,5,126,0,0,214,58,1,0,0,0,215,216,5,33,0,0,216,
        60,1,0,0,0,217,218,5,47,0,0,218,62,1,0,0,0,219,220,5,37,0,0,220,
        64,1,0,0,0,221,222,5,62,0,0,222,223,5,62,0,0,223,66,1,0,0,0,224,
        225,5,60,0,0,225,226,5,60,0,0,226,68,1,0,0,0,227,228,5,60,0,0,228,
        70,1,0,0,0,229,230,5,62,0,0,230,72,1,0,0,0,231,232,5,62,0,0,232,
        233,5,61,0,0,233,74,1,0,0,0,234,235,5,60,0,0,235,236,5,61,0,0,236,
        76,1,0,0,0,237,238,5,61,0,0,238,239,5,61,0,0,239,78,1,0,0,0,240,
        241,5,33,0,0,241,242,5,61,0,0,242,80,1,0,0,0,243,244,5,94,0,0,244,
        82,1,0,0,0,245,246,5,124,0,0,246,84,1,0,0,0,247,248,5,38,0,0,248,
        249,5,38,0,0,249,86,1,0,0,0,250,251,5,124,0,0,251,252,5,124,0,0,
        252,88,1,0,0,0,253,254,5,114,0,0,254,255,5,101,0,0,255,256,5,116,
        0,0,256,257,5,117,0,0,257,258,5,114,0,0,258,259,5,110,0,0,259,260,
        5,32,0,0,260,261,5,48,0,0,261,90,1,0,0,0,262,263,5,47,0,0,263,264,
        5,42,0,0,264,268,1,0,0,0,265,267,9,0,0,0,266,265,1,0,0,0,267,270,
        1,0,0,0,268,269,1,0,0,0,268,266,1,0,0,0,269,271,1,0,0,0,270,268,
        1,0,0,0,271,272,5,42,0,0,272,273,5,47,0,0,273,92,1,0,0,0,274,275,
        5,47,0,0,275,276,5,47,0,0,276,280,1,0,0,0,277,279,8,0,0,0,278,277,
        1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,94,1,
        0,0,0,282,280,1,0,0,0,283,285,7,1,0,0,284,283,1,0,0,0,285,289,1,
        0,0,0,286,288,7,2,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,
        0,0,0,289,290,1,0,0,0,290,96,1,0,0,0,291,289,1,0,0,0,292,296,7,3,
        0,0,293,295,7,4,0,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,
        0,0,296,297,1,0,0,0,297,301,1,0,0,0,298,296,1,0,0,0,299,301,7,4,
        0,0,300,292,1,0,0,0,300,299,1,0,0,0,301,98,1,0,0,0,302,318,3,97,
        48,0,303,305,3,97,48,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,
        0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,314,5,
        46,0,0,310,313,3,97,48,0,311,313,5,48,0,0,312,310,1,0,0,0,312,311,
        1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,318,
        1,0,0,0,316,314,1,0,0,0,317,302,1,0,0,0,317,306,1,0,0,0,318,100,
        1,0,0,0,319,321,5,39,0,0,320,322,5,92,0,0,321,322,1,0,0,0,321,320,
        1,0,0,0,322,323,1,0,0,0,323,324,9,0,0,0,324,325,5,39,0,0,325,102,
        1,0,0,0,326,328,7,5,0,0,327,326,1,0,0,0,328,329,1,0,0,0,329,327,
        1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,6,51,0,0,332,104,
        1,0,0,0,14,0,268,280,284,287,289,296,300,306,312,314,317,321,329,
        1,6,0,0
    ]

class grammarCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    MULTILINE = 46
    SINGLECOMMENT = 47
    IDENTIFIER = 48
    INT = 49
    FLOAT = 50
    CHAR = 51
    WS = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'#include <stdio.h>'", "'('", "')'", "'{'", "'}'", "'typedef'", 
            "'if'", "'else'", "'printf'", "'\"'", "'%s'", "'%d'", "'%x'", 
            "'%f'", "'%c'", "','", "'const'", "'int'", "'char'", "'float'", 
            "'*'", "'='", "'++'", "'--'", "'&'", "'+'", "'-'", "'~'", "'!'", 
            "'/'", "'%'", "'>>'", "'<<'", "'<'", "'>'", "'>='", "'<='", 
            "'=='", "'!='", "'^'", "'|'", "'&&'", "'||'", "'return 0'" ]

    symbolicNames = [ "<INVALID>",
            "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", "INT", "FLOAT", 
            "CHAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", "INT", 
                  "FLOAT", "CHAR", "WS" ]

    grammarFileName = "grammarC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


