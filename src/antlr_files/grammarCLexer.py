# Generated from /home/watson/OneDrive/2023-2024/Compilers/Project/Compilers/grammar/grammarC.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,66,440,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
        20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,
        28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
        31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
        33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,
        37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,
        48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,
        53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,
        58,1,58,1,58,5,58,365,8,58,10,58,12,58,368,9,58,1,58,1,58,1,58,1,
        59,1,59,1,59,1,59,5,59,377,8,59,10,59,12,59,380,9,59,1,60,3,60,383,
        8,60,1,60,5,60,386,8,60,10,60,12,60,389,9,60,1,61,1,61,5,61,393,
        8,61,10,61,12,61,396,9,61,1,61,3,61,399,8,61,1,62,1,62,5,62,403,
        8,62,10,62,12,62,406,9,62,1,62,1,62,1,62,5,62,411,8,62,10,62,12,
        62,414,9,62,3,62,416,8,62,1,63,1,63,3,63,420,8,63,1,63,1,63,1,63,
        1,64,1,64,5,64,427,8,64,10,64,12,64,430,9,64,1,64,1,64,1,65,4,65,
        435,8,65,11,65,12,65,436,1,65,1,65,2,366,419,0,66,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
        117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,1,0,6,1,
        0,10,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        49,57,1,0,48,57,3,0,9,10,13,13,32,32,451,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,
        0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
        123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,
        0,0,1,133,1,0,0,0,3,135,1,0,0,0,5,143,1,0,0,0,7,150,1,0,0,0,9,159,
        1,0,0,0,11,169,1,0,0,0,13,174,1,0,0,0,15,176,1,0,0,0,17,178,1,0,
        0,0,19,180,1,0,0,0,21,182,1,0,0,0,23,184,1,0,0,0,25,190,1,0,0,0,
        27,199,1,0,0,0,29,207,1,0,0,0,31,215,1,0,0,0,33,218,1,0,0,0,35,223,
        1,0,0,0,37,227,1,0,0,0,39,233,1,0,0,0,41,240,1,0,0,0,43,245,1,0,
        0,0,45,247,1,0,0,0,47,252,1,0,0,0,49,259,1,0,0,0,51,261,1,0,0,0,
        53,264,1,0,0,0,55,267,1,0,0,0,57,270,1,0,0,0,59,273,1,0,0,0,61,276,
        1,0,0,0,63,282,1,0,0,0,65,286,1,0,0,0,67,291,1,0,0,0,69,297,1,0,
        0,0,71,299,1,0,0,0,73,306,1,0,0,0,75,308,1,0,0,0,77,311,1,0,0,0,
        79,314,1,0,0,0,81,316,1,0,0,0,83,318,1,0,0,0,85,320,1,0,0,0,87,322,
        1,0,0,0,89,324,1,0,0,0,91,326,1,0,0,0,93,328,1,0,0,0,95,331,1,0,
        0,0,97,334,1,0,0,0,99,336,1,0,0,0,101,338,1,0,0,0,103,341,1,0,0,
        0,105,344,1,0,0,0,107,347,1,0,0,0,109,350,1,0,0,0,111,352,1,0,0,
        0,113,354,1,0,0,0,115,357,1,0,0,0,117,360,1,0,0,0,119,372,1,0,0,
        0,121,382,1,0,0,0,123,398,1,0,0,0,125,415,1,0,0,0,127,417,1,0,0,
        0,129,424,1,0,0,0,131,434,1,0,0,0,133,134,5,59,0,0,134,2,1,0,0,0,
        135,136,5,35,0,0,136,137,5,105,0,0,137,138,5,102,0,0,138,139,5,110,
        0,0,139,140,5,100,0,0,140,141,5,101,0,0,141,142,5,102,0,0,142,4,
        1,0,0,0,143,144,5,35,0,0,144,145,5,101,0,0,145,146,5,110,0,0,146,
        147,5,100,0,0,147,148,5,105,0,0,148,149,5,102,0,0,149,6,1,0,0,0,
        150,151,5,35,0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,154,5,99,
        0,0,154,155,5,108,0,0,155,156,5,117,0,0,156,157,5,100,0,0,157,158,
        5,101,0,0,158,8,1,0,0,0,159,160,5,60,0,0,160,161,5,115,0,0,161,162,
        5,116,0,0,162,163,5,100,0,0,163,164,5,105,0,0,164,165,5,111,0,0,
        165,166,5,46,0,0,166,167,5,104,0,0,167,168,5,62,0,0,168,10,1,0,0,
        0,169,170,5,118,0,0,170,171,5,111,0,0,171,172,5,105,0,0,172,173,
        5,100,0,0,173,12,1,0,0,0,174,175,5,40,0,0,175,14,1,0,0,0,176,177,
        5,41,0,0,177,16,1,0,0,0,178,179,5,123,0,0,179,18,1,0,0,0,180,181,
        5,125,0,0,181,20,1,0,0,0,182,183,5,44,0,0,183,22,1,0,0,0,184,185,
        5,98,0,0,185,186,5,114,0,0,186,187,5,101,0,0,187,188,5,97,0,0,188,
        189,5,107,0,0,189,24,1,0,0,0,190,191,5,99,0,0,191,192,5,111,0,0,
        192,193,5,110,0,0,193,194,5,116,0,0,194,195,5,105,0,0,195,196,5,
        110,0,0,196,197,5,117,0,0,197,198,5,101,0,0,198,26,1,0,0,0,199,200,
        5,116,0,0,200,201,5,121,0,0,201,202,5,112,0,0,202,203,5,101,0,0,
        203,204,5,100,0,0,204,205,5,101,0,0,205,206,5,102,0,0,206,28,1,0,
        0,0,207,208,5,35,0,0,208,209,5,100,0,0,209,210,5,101,0,0,210,211,
        5,102,0,0,211,212,5,105,0,0,212,213,5,110,0,0,213,214,5,101,0,0,
        214,30,1,0,0,0,215,216,5,105,0,0,216,217,5,102,0,0,217,32,1,0,0,
        0,218,219,5,101,0,0,219,220,5,108,0,0,220,221,5,115,0,0,221,222,
        5,101,0,0,222,34,1,0,0,0,223,224,5,102,0,0,224,225,5,111,0,0,225,
        226,5,114,0,0,226,36,1,0,0,0,227,228,5,119,0,0,228,229,5,104,0,0,
        229,230,5,105,0,0,230,231,5,108,0,0,231,232,5,101,0,0,232,38,1,0,
        0,0,233,234,5,115,0,0,234,235,5,119,0,0,235,236,5,105,0,0,236,237,
        5,116,0,0,237,238,5,99,0,0,238,239,5,104,0,0,239,40,1,0,0,0,240,
        241,5,99,0,0,241,242,5,97,0,0,242,243,5,115,0,0,243,244,5,101,0,
        0,244,42,1,0,0,0,245,246,5,58,0,0,246,44,1,0,0,0,247,248,5,101,0,
        0,248,249,5,110,0,0,249,250,5,117,0,0,250,251,5,109,0,0,251,46,1,
        0,0,0,252,253,5,112,0,0,253,254,5,114,0,0,254,255,5,105,0,0,255,
        256,5,110,0,0,256,257,5,116,0,0,257,258,5,102,0,0,258,48,1,0,0,0,
        259,260,5,34,0,0,260,50,1,0,0,0,261,262,5,37,0,0,262,263,5,115,0,
        0,263,52,1,0,0,0,264,265,5,37,0,0,265,266,5,100,0,0,266,54,1,0,0,
        0,267,268,5,37,0,0,268,269,5,120,0,0,269,56,1,0,0,0,270,271,5,37,
        0,0,271,272,5,102,0,0,272,58,1,0,0,0,273,274,5,37,0,0,274,275,5,
        99,0,0,275,60,1,0,0,0,276,277,5,99,0,0,277,278,5,111,0,0,278,279,
        5,110,0,0,279,280,5,115,0,0,280,281,5,116,0,0,281,62,1,0,0,0,282,
        283,5,105,0,0,283,284,5,110,0,0,284,285,5,116,0,0,285,64,1,0,0,0,
        286,287,5,99,0,0,287,288,5,104,0,0,288,289,5,97,0,0,289,290,5,114,
        0,0,290,66,1,0,0,0,291,292,5,102,0,0,292,293,5,108,0,0,293,294,5,
        111,0,0,294,295,5,97,0,0,295,296,5,116,0,0,296,68,1,0,0,0,297,298,
        5,42,0,0,298,70,1,0,0,0,299,300,5,114,0,0,300,301,5,101,0,0,301,
        302,5,116,0,0,302,303,5,117,0,0,303,304,5,114,0,0,304,305,5,110,
        0,0,305,72,1,0,0,0,306,307,5,61,0,0,307,74,1,0,0,0,308,309,5,43,
        0,0,309,310,5,43,0,0,310,76,1,0,0,0,311,312,5,45,0,0,312,313,5,45,
        0,0,313,78,1,0,0,0,314,315,5,38,0,0,315,80,1,0,0,0,316,317,5,43,
        0,0,317,82,1,0,0,0,318,319,5,45,0,0,319,84,1,0,0,0,320,321,5,126,
        0,0,321,86,1,0,0,0,322,323,5,33,0,0,323,88,1,0,0,0,324,325,5,47,
        0,0,325,90,1,0,0,0,326,327,5,37,0,0,327,92,1,0,0,0,328,329,5,62,
        0,0,329,330,5,62,0,0,330,94,1,0,0,0,331,332,5,60,0,0,332,333,5,60,
        0,0,333,96,1,0,0,0,334,335,5,60,0,0,335,98,1,0,0,0,336,337,5,62,
        0,0,337,100,1,0,0,0,338,339,5,62,0,0,339,340,5,61,0,0,340,102,1,
        0,0,0,341,342,5,60,0,0,342,343,5,61,0,0,343,104,1,0,0,0,344,345,
        5,61,0,0,345,346,5,61,0,0,346,106,1,0,0,0,347,348,5,33,0,0,348,349,
        5,61,0,0,349,108,1,0,0,0,350,351,5,94,0,0,351,110,1,0,0,0,352,353,
        5,124,0,0,353,112,1,0,0,0,354,355,5,38,0,0,355,356,5,38,0,0,356,
        114,1,0,0,0,357,358,5,124,0,0,358,359,5,124,0,0,359,116,1,0,0,0,
        360,361,5,47,0,0,361,362,5,42,0,0,362,366,1,0,0,0,363,365,9,0,0,
        0,364,363,1,0,0,0,365,368,1,0,0,0,366,367,1,0,0,0,366,364,1,0,0,
        0,367,369,1,0,0,0,368,366,1,0,0,0,369,370,5,42,0,0,370,371,5,47,
        0,0,371,118,1,0,0,0,372,373,5,47,0,0,373,374,5,47,0,0,374,378,1,
        0,0,0,375,377,8,0,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,
        0,0,0,378,379,1,0,0,0,379,120,1,0,0,0,380,378,1,0,0,0,381,383,7,
        1,0,0,382,381,1,0,0,0,383,387,1,0,0,0,384,386,7,2,0,0,385,384,1,
        0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,122,1,
        0,0,0,389,387,1,0,0,0,390,394,7,3,0,0,391,393,7,4,0,0,392,391,1,
        0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,399,1,
        0,0,0,396,394,1,0,0,0,397,399,7,4,0,0,398,390,1,0,0,0,398,397,1,
        0,0,0,399,124,1,0,0,0,400,416,3,123,61,0,401,403,3,123,61,0,402,
        401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,
        407,1,0,0,0,406,404,1,0,0,0,407,412,5,46,0,0,408,411,3,123,61,0,
        409,411,5,48,0,0,410,408,1,0,0,0,410,409,1,0,0,0,411,414,1,0,0,0,
        412,410,1,0,0,0,412,413,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,
        415,400,1,0,0,0,415,404,1,0,0,0,416,126,1,0,0,0,417,419,5,39,0,0,
        418,420,5,92,0,0,419,420,1,0,0,0,419,418,1,0,0,0,420,421,1,0,0,0,
        421,422,9,0,0,0,422,423,5,39,0,0,423,128,1,0,0,0,424,428,5,34,0,
        0,425,427,8,0,0,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,
        0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,432,5,34,0,
        0,432,130,1,0,0,0,433,435,7,5,0,0,434,433,1,0,0,0,435,436,1,0,0,
        0,436,434,1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,439,6,65,0,
        0,439,132,1,0,0,0,15,0,366,378,382,385,387,394,398,404,410,412,415,
        419,428,436,1,6,0,0
    ]

class grammarCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    MULTILINE = 59
    SINGLECOMMENT = 60
    IDENTIFIER = 61
    INT = 62
    FLOAT = 63
    CHAR = 64
    STRING = 65
    WS = 66

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'#ifndef'", "'#endif'", "'#include'", "'<stdio.h>'", 
            "'void'", "'('", "')'", "'{'", "'}'", "','", "'break'", "'continue'", 
            "'typedef'", "'#define'", "'if'", "'else'", "'for'", "'while'", 
            "'switch'", "'case'", "':'", "'enum'", "'printf'", "'\"'", "'%s'", 
            "'%d'", "'%x'", "'%f'", "'%c'", "'const'", "'int'", "'char'", 
            "'float'", "'*'", "'return'", "'='", "'++'", "'--'", "'&'", 
            "'+'", "'-'", "'~'", "'!'", "'/'", "'%'", "'>>'", "'<<'", "'<'", 
            "'>'", "'>='", "'<='", "'=='", "'!='", "'^'", "'|'", "'&&'", 
            "'||'" ]

    symbolicNames = [ "<INVALID>",
            "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", "INT", "FLOAT", 
            "CHAR", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", 
                  "T__56", "T__57", "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", 
                  "INT", "FLOAT", "CHAR", "STRING", "WS" ]

    grammarFileName = "grammarC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


