# Generated from /home/watson/OneDrive/2023-2024/Compilers/Project/Compilers/grammar/grammarC.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,66,456,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,
        1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
        1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,
        1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,
        1,58,1,58,1,58,1,58,5,58,379,8,58,10,58,12,58,382,9,58,1,58,1,58,
        1,58,1,59,1,59,1,59,1,59,5,59,391,8,59,10,59,12,59,394,9,59,1,60,
        3,60,397,8,60,1,60,5,60,400,8,60,10,60,12,60,403,9,60,1,61,1,61,
        5,61,407,8,61,10,61,12,61,410,9,61,1,61,3,61,413,8,61,1,62,1,62,
        5,62,417,8,62,10,62,12,62,420,9,62,1,62,1,62,1,62,5,62,425,8,62,
        10,62,12,62,428,9,62,3,62,430,8,62,1,63,1,63,3,63,434,8,63,1,63,
        1,63,1,63,1,64,1,64,1,64,1,64,5,64,443,8,64,10,64,12,64,446,9,64,
        1,64,1,64,1,65,4,65,451,8,65,11,65,12,65,452,1,65,1,65,2,380,433,
        0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
        56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,
        131,66,1,0,7,1,0,10,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,49,57,1,0,48,57,2,0,10,10,34,34,3,0,9,10,13,13,32,
        32,468,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
        0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
        0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
        0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
        0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,1,133,1,0,0,0,3,135,1,0,0,0,5,
        143,1,0,0,0,7,150,1,0,0,0,9,159,1,0,0,0,11,169,1,0,0,0,13,171,1,
        0,0,0,15,173,1,0,0,0,17,175,1,0,0,0,19,177,1,0,0,0,21,179,1,0,0,
        0,23,181,1,0,0,0,25,187,1,0,0,0,27,196,1,0,0,0,29,204,1,0,0,0,31,
        212,1,0,0,0,33,214,1,0,0,0,35,217,1,0,0,0,37,222,1,0,0,0,39,226,
        1,0,0,0,41,232,1,0,0,0,43,239,1,0,0,0,45,244,1,0,0,0,47,246,1,0,
        0,0,49,254,1,0,0,0,51,259,1,0,0,0,53,266,1,0,0,0,55,272,1,0,0,0,
        57,278,1,0,0,0,59,282,1,0,0,0,61,287,1,0,0,0,63,293,1,0,0,0,65,298,
        1,0,0,0,67,305,1,0,0,0,69,311,1,0,0,0,71,318,1,0,0,0,73,320,1,0,
        0,0,75,323,1,0,0,0,77,326,1,0,0,0,79,328,1,0,0,0,81,330,1,0,0,0,
        83,332,1,0,0,0,85,334,1,0,0,0,87,336,1,0,0,0,89,338,1,0,0,0,91,341,
        1,0,0,0,93,344,1,0,0,0,95,346,1,0,0,0,97,348,1,0,0,0,99,351,1,0,
        0,0,101,354,1,0,0,0,103,357,1,0,0,0,105,360,1,0,0,0,107,362,1,0,
        0,0,109,364,1,0,0,0,111,367,1,0,0,0,113,370,1,0,0,0,115,372,1,0,
        0,0,117,374,1,0,0,0,119,386,1,0,0,0,121,396,1,0,0,0,123,412,1,0,
        0,0,125,429,1,0,0,0,127,431,1,0,0,0,129,438,1,0,0,0,131,450,1,0,
        0,0,133,134,5,59,0,0,134,2,1,0,0,0,135,136,5,35,0,0,136,137,5,105,
        0,0,137,138,5,102,0,0,138,139,5,110,0,0,139,140,5,100,0,0,140,141,
        5,101,0,0,141,142,5,102,0,0,142,4,1,0,0,0,143,144,5,35,0,0,144,145,
        5,101,0,0,145,146,5,110,0,0,146,147,5,100,0,0,147,148,5,105,0,0,
        148,149,5,102,0,0,149,6,1,0,0,0,150,151,5,35,0,0,151,152,5,105,0,
        0,152,153,5,110,0,0,153,154,5,99,0,0,154,155,5,108,0,0,155,156,5,
        117,0,0,156,157,5,100,0,0,157,158,5,101,0,0,158,8,1,0,0,0,159,160,
        5,60,0,0,160,161,5,115,0,0,161,162,5,116,0,0,162,163,5,100,0,0,163,
        164,5,105,0,0,164,165,5,111,0,0,165,166,5,46,0,0,166,167,5,104,0,
        0,167,168,5,62,0,0,168,10,1,0,0,0,169,170,5,40,0,0,170,12,1,0,0,
        0,171,172,5,41,0,0,172,14,1,0,0,0,173,174,5,123,0,0,174,16,1,0,0,
        0,175,176,5,125,0,0,176,18,1,0,0,0,177,178,5,44,0,0,178,20,1,0,0,
        0,179,180,5,42,0,0,180,22,1,0,0,0,181,182,5,98,0,0,182,183,5,114,
        0,0,183,184,5,101,0,0,184,185,5,97,0,0,185,186,5,107,0,0,186,24,
        1,0,0,0,187,188,5,99,0,0,188,189,5,111,0,0,189,190,5,110,0,0,190,
        191,5,116,0,0,191,192,5,105,0,0,192,193,5,110,0,0,193,194,5,117,
        0,0,194,195,5,101,0,0,195,26,1,0,0,0,196,197,5,116,0,0,197,198,5,
        121,0,0,198,199,5,112,0,0,199,200,5,101,0,0,200,201,5,100,0,0,201,
        202,5,101,0,0,202,203,5,102,0,0,203,28,1,0,0,0,204,205,5,35,0,0,
        205,206,5,100,0,0,206,207,5,101,0,0,207,208,5,102,0,0,208,209,5,
        105,0,0,209,210,5,110,0,0,210,211,5,101,0,0,211,30,1,0,0,0,212,213,
        5,45,0,0,213,32,1,0,0,0,214,215,5,105,0,0,215,216,5,102,0,0,216,
        34,1,0,0,0,217,218,5,101,0,0,218,219,5,108,0,0,219,220,5,115,0,0,
        220,221,5,101,0,0,221,36,1,0,0,0,222,223,5,102,0,0,223,224,5,111,
        0,0,224,225,5,114,0,0,225,38,1,0,0,0,226,227,5,119,0,0,227,228,5,
        104,0,0,228,229,5,105,0,0,229,230,5,108,0,0,230,231,5,101,0,0,231,
        40,1,0,0,0,232,233,5,115,0,0,233,234,5,119,0,0,234,235,5,105,0,0,
        235,236,5,116,0,0,236,237,5,99,0,0,237,238,5,104,0,0,238,42,1,0,
        0,0,239,240,5,99,0,0,240,241,5,97,0,0,241,242,5,115,0,0,242,243,
        5,101,0,0,243,44,1,0,0,0,244,245,5,58,0,0,245,46,1,0,0,0,246,247,
        5,100,0,0,247,248,5,101,0,0,248,249,5,102,0,0,249,250,5,97,0,0,250,
        251,5,117,0,0,251,252,5,108,0,0,252,253,5,116,0,0,253,48,1,0,0,0,
        254,255,5,101,0,0,255,256,5,110,0,0,256,257,5,117,0,0,257,258,5,
        109,0,0,258,50,1,0,0,0,259,260,5,112,0,0,260,261,5,114,0,0,261,262,
        5,105,0,0,262,263,5,110,0,0,263,264,5,116,0,0,264,265,5,102,0,0,
        265,52,1,0,0,0,266,267,5,115,0,0,267,268,5,99,0,0,268,269,5,97,0,
        0,269,270,5,110,0,0,270,271,5,102,0,0,271,54,1,0,0,0,272,273,5,99,
        0,0,273,274,5,111,0,0,274,275,5,110,0,0,275,276,5,115,0,0,276,277,
        5,116,0,0,277,56,1,0,0,0,278,279,5,105,0,0,279,280,5,110,0,0,280,
        281,5,116,0,0,281,58,1,0,0,0,282,283,5,99,0,0,283,284,5,104,0,0,
        284,285,5,97,0,0,285,286,5,114,0,0,286,60,1,0,0,0,287,288,5,102,
        0,0,288,289,5,108,0,0,289,290,5,111,0,0,290,291,5,97,0,0,291,292,
        5,116,0,0,292,62,1,0,0,0,293,294,5,118,0,0,294,295,5,111,0,0,295,
        296,5,105,0,0,296,297,5,100,0,0,297,64,1,0,0,0,298,299,5,115,0,0,
        299,300,5,116,0,0,300,301,5,114,0,0,301,302,5,117,0,0,302,303,5,
        99,0,0,303,304,5,116,0,0,304,66,1,0,0,0,305,306,5,117,0,0,306,307,
        5,110,0,0,307,308,5,105,0,0,308,309,5,111,0,0,309,310,5,110,0,0,
        310,68,1,0,0,0,311,312,5,114,0,0,312,313,5,101,0,0,313,314,5,116,
        0,0,314,315,5,117,0,0,315,316,5,114,0,0,316,317,5,110,0,0,317,70,
        1,0,0,0,318,319,5,61,0,0,319,72,1,0,0,0,320,321,5,43,0,0,321,322,
        5,43,0,0,322,74,1,0,0,0,323,324,5,45,0,0,324,325,5,45,0,0,325,76,
        1,0,0,0,326,327,5,38,0,0,327,78,1,0,0,0,328,329,5,43,0,0,329,80,
        1,0,0,0,330,331,5,126,0,0,331,82,1,0,0,0,332,333,5,33,0,0,333,84,
        1,0,0,0,334,335,5,47,0,0,335,86,1,0,0,0,336,337,5,37,0,0,337,88,
        1,0,0,0,338,339,5,62,0,0,339,340,5,62,0,0,340,90,1,0,0,0,341,342,
        5,60,0,0,342,343,5,60,0,0,343,92,1,0,0,0,344,345,5,60,0,0,345,94,
        1,0,0,0,346,347,5,62,0,0,347,96,1,0,0,0,348,349,5,62,0,0,349,350,
        5,61,0,0,350,98,1,0,0,0,351,352,5,60,0,0,352,353,5,61,0,0,353,100,
        1,0,0,0,354,355,5,61,0,0,355,356,5,61,0,0,356,102,1,0,0,0,357,358,
        5,33,0,0,358,359,5,61,0,0,359,104,1,0,0,0,360,361,5,94,0,0,361,106,
        1,0,0,0,362,363,5,124,0,0,363,108,1,0,0,0,364,365,5,38,0,0,365,366,
        5,38,0,0,366,110,1,0,0,0,367,368,5,124,0,0,368,369,5,124,0,0,369,
        112,1,0,0,0,370,371,5,91,0,0,371,114,1,0,0,0,372,373,5,93,0,0,373,
        116,1,0,0,0,374,375,5,47,0,0,375,376,5,42,0,0,376,380,1,0,0,0,377,
        379,9,0,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,381,1,0,0,0,380,
        378,1,0,0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,384,5,42,0,0,384,
        385,5,47,0,0,385,118,1,0,0,0,386,387,5,47,0,0,387,388,5,47,0,0,388,
        392,1,0,0,0,389,391,8,0,0,0,390,389,1,0,0,0,391,394,1,0,0,0,392,
        390,1,0,0,0,392,393,1,0,0,0,393,120,1,0,0,0,394,392,1,0,0,0,395,
        397,7,1,0,0,396,395,1,0,0,0,397,401,1,0,0,0,398,400,7,2,0,0,399,
        398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,
        122,1,0,0,0,403,401,1,0,0,0,404,408,7,3,0,0,405,407,7,4,0,0,406,
        405,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,
        413,1,0,0,0,410,408,1,0,0,0,411,413,7,4,0,0,412,404,1,0,0,0,412,
        411,1,0,0,0,413,124,1,0,0,0,414,430,3,123,61,0,415,417,3,123,61,
        0,416,415,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,
        0,419,421,1,0,0,0,420,418,1,0,0,0,421,426,5,46,0,0,422,425,3,123,
        61,0,423,425,5,48,0,0,424,422,1,0,0,0,424,423,1,0,0,0,425,428,1,
        0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,430,1,0,0,0,428,426,1,
        0,0,0,429,414,1,0,0,0,429,418,1,0,0,0,430,126,1,0,0,0,431,433,5,
        39,0,0,432,434,5,92,0,0,433,434,1,0,0,0,433,432,1,0,0,0,434,435,
        1,0,0,0,435,436,9,0,0,0,436,437,5,39,0,0,437,128,1,0,0,0,438,444,
        5,34,0,0,439,443,8,5,0,0,440,441,5,92,0,0,441,443,5,34,0,0,442,439,
        1,0,0,0,442,440,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,
        1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,448,5,34,0,0,448,130,
        1,0,0,0,449,451,7,6,0,0,450,449,1,0,0,0,451,452,1,0,0,0,452,450,
        1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,6,65,0,0,455,132,
        1,0,0,0,16,0,380,392,396,399,401,408,412,418,424,426,429,433,442,
        444,452,1,6,0,0
    ]

class grammarCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    MULTILINE = 59
    SINGLECOMMENT = 60
    IDENTIFIER = 61
    INT = 62
    FLOAT = 63
    CHAR = 64
    STRING = 65
    WS = 66

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'#ifndef'", "'#endif'", "'#include'", "'<stdio.h>'", 
            "'('", "')'", "'{'", "'}'", "','", "'*'", "'break'", "'continue'", 
            "'typedef'", "'#define'", "'-'", "'if'", "'else'", "'for'", 
            "'while'", "'switch'", "'case'", "':'", "'default'", "'enum'", 
            "'printf'", "'scanf'", "'const'", "'int'", "'char'", "'float'", 
            "'void'", "'struct'", "'union'", "'return'", "'='", "'++'", 
            "'--'", "'&'", "'+'", "'~'", "'!'", "'/'", "'%'", "'>>'", "'<<'", 
            "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'^'", "'|'", 
            "'&&'", "'||'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", "INT", "FLOAT", 
            "CHAR", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", 
                  "T__56", "T__57", "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", 
                  "INT", "FLOAT", "CHAR", "STRING", "WS" ]

    grammarFileName = "grammarC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


