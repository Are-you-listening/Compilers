# Generated from /home/tibov/Desktop/universiteit/bachlor-2/Compilers/Project/Compilers/grammar/expression.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,323,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
        1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
        1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,
        1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,244,
        8,42,10,42,12,42,247,9,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,
        256,8,43,10,43,12,43,259,9,43,1,44,3,44,262,8,44,1,44,5,44,265,8,
        44,10,44,12,44,268,9,44,1,45,1,45,5,45,272,8,45,10,45,12,45,275,
        9,45,1,45,3,45,278,8,45,1,46,5,46,281,8,46,10,46,12,46,284,9,46,
        1,46,3,46,287,8,46,1,46,4,46,290,8,46,11,46,12,46,291,1,46,4,46,
        295,8,46,11,46,12,46,296,1,46,1,46,5,46,301,8,46,10,46,12,46,304,
        9,46,3,46,306,8,46,3,46,308,8,46,1,47,1,47,3,47,312,8,47,1,47,1,
        47,1,47,1,48,4,48,318,8,48,11,48,12,48,319,1,48,1,48,2,245,311,0,
        49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,1,0,6,1,0,10,10,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,
        336,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,
        3,118,1,0,0,0,5,120,1,0,0,0,7,122,1,0,0,0,9,124,1,0,0,0,11,126,1,
        0,0,0,13,128,1,0,0,0,15,136,1,0,0,0,17,143,1,0,0,0,19,145,1,0,0,
        0,21,148,1,0,0,0,23,151,1,0,0,0,25,154,1,0,0,0,27,157,1,0,0,0,29,
        160,1,0,0,0,31,162,1,0,0,0,33,168,1,0,0,0,35,172,1,0,0,0,37,177,
        1,0,0,0,39,183,1,0,0,0,41,185,1,0,0,0,43,187,1,0,0,0,45,190,1,0,
        0,0,47,193,1,0,0,0,49,195,1,0,0,0,51,197,1,0,0,0,53,199,1,0,0,0,
        55,201,1,0,0,0,57,203,1,0,0,0,59,205,1,0,0,0,61,207,1,0,0,0,63,210,
        1,0,0,0,65,213,1,0,0,0,67,215,1,0,0,0,69,217,1,0,0,0,71,220,1,0,
        0,0,73,223,1,0,0,0,75,226,1,0,0,0,77,229,1,0,0,0,79,231,1,0,0,0,
        81,233,1,0,0,0,83,236,1,0,0,0,85,239,1,0,0,0,87,251,1,0,0,0,89,261,
        1,0,0,0,91,277,1,0,0,0,93,307,1,0,0,0,95,309,1,0,0,0,97,317,1,0,
        0,0,99,100,5,35,0,0,100,101,5,105,0,0,101,102,5,110,0,0,102,103,
        5,99,0,0,103,104,5,108,0,0,104,105,5,117,0,0,105,106,5,100,0,0,106,
        107,5,101,0,0,107,108,5,32,0,0,108,109,5,60,0,0,109,110,5,115,0,
        0,110,111,5,116,0,0,111,112,5,100,0,0,112,113,5,105,0,0,113,114,
        5,111,0,0,114,115,5,46,0,0,115,116,5,104,0,0,116,117,5,62,0,0,117,
        2,1,0,0,0,118,119,5,40,0,0,119,4,1,0,0,0,120,121,5,41,0,0,121,6,
        1,0,0,0,122,123,5,123,0,0,123,8,1,0,0,0,124,125,5,125,0,0,125,10,
        1,0,0,0,126,127,5,59,0,0,127,12,1,0,0,0,128,129,5,116,0,0,129,130,
        5,121,0,0,130,131,5,112,0,0,131,132,5,101,0,0,132,133,5,100,0,0,
        133,134,5,101,0,0,134,135,5,102,0,0,135,14,1,0,0,0,136,137,5,112,
        0,0,137,138,5,114,0,0,138,139,5,105,0,0,139,140,5,110,0,0,140,141,
        5,116,0,0,141,142,5,102,0,0,142,16,1,0,0,0,143,144,5,34,0,0,144,
        18,1,0,0,0,145,146,5,37,0,0,146,147,5,115,0,0,147,20,1,0,0,0,148,
        149,5,37,0,0,149,150,5,100,0,0,150,22,1,0,0,0,151,152,5,37,0,0,152,
        153,5,120,0,0,153,24,1,0,0,0,154,155,5,37,0,0,155,156,5,102,0,0,
        156,26,1,0,0,0,157,158,5,37,0,0,158,159,5,99,0,0,159,28,1,0,0,0,
        160,161,5,44,0,0,161,30,1,0,0,0,162,163,5,99,0,0,163,164,5,111,0,
        0,164,165,5,110,0,0,165,166,5,115,0,0,166,167,5,116,0,0,167,32,1,
        0,0,0,168,169,5,105,0,0,169,170,5,110,0,0,170,171,5,116,0,0,171,
        34,1,0,0,0,172,173,5,99,0,0,173,174,5,104,0,0,174,175,5,97,0,0,175,
        176,5,114,0,0,176,36,1,0,0,0,177,178,5,102,0,0,178,179,5,108,0,0,
        179,180,5,111,0,0,180,181,5,97,0,0,181,182,5,116,0,0,182,38,1,0,
        0,0,183,184,5,42,0,0,184,40,1,0,0,0,185,186,5,61,0,0,186,42,1,0,
        0,0,187,188,5,43,0,0,188,189,5,43,0,0,189,44,1,0,0,0,190,191,5,45,
        0,0,191,192,5,45,0,0,192,46,1,0,0,0,193,194,5,38,0,0,194,48,1,0,
        0,0,195,196,5,43,0,0,196,50,1,0,0,0,197,198,5,45,0,0,198,52,1,0,
        0,0,199,200,5,126,0,0,200,54,1,0,0,0,201,202,5,33,0,0,202,56,1,0,
        0,0,203,204,5,47,0,0,204,58,1,0,0,0,205,206,5,37,0,0,206,60,1,0,
        0,0,207,208,5,62,0,0,208,209,5,62,0,0,209,62,1,0,0,0,210,211,5,60,
        0,0,211,212,5,60,0,0,212,64,1,0,0,0,213,214,5,60,0,0,214,66,1,0,
        0,0,215,216,5,62,0,0,216,68,1,0,0,0,217,218,5,62,0,0,218,219,5,61,
        0,0,219,70,1,0,0,0,220,221,5,60,0,0,221,222,5,61,0,0,222,72,1,0,
        0,0,223,224,5,61,0,0,224,225,5,61,0,0,225,74,1,0,0,0,226,227,5,33,
        0,0,227,228,5,61,0,0,228,76,1,0,0,0,229,230,5,94,0,0,230,78,1,0,
        0,0,231,232,5,124,0,0,232,80,1,0,0,0,233,234,5,38,0,0,234,235,5,
        38,0,0,235,82,1,0,0,0,236,237,5,124,0,0,237,238,5,124,0,0,238,84,
        1,0,0,0,239,240,5,47,0,0,240,241,5,42,0,0,241,245,1,0,0,0,242,244,
        9,0,0,0,243,242,1,0,0,0,244,247,1,0,0,0,245,246,1,0,0,0,245,243,
        1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,249,5,42,0,0,249,250,
        5,47,0,0,250,86,1,0,0,0,251,252,5,47,0,0,252,253,5,47,0,0,253,257,
        1,0,0,0,254,256,8,0,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,
        1,0,0,0,257,258,1,0,0,0,258,88,1,0,0,0,259,257,1,0,0,0,260,262,7,
        1,0,0,261,260,1,0,0,0,262,266,1,0,0,0,263,265,7,2,0,0,264,263,1,
        0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,90,1,0,
        0,0,268,266,1,0,0,0,269,273,7,3,0,0,270,272,7,4,0,0,271,270,1,0,
        0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,278,1,0,
        0,0,275,273,1,0,0,0,276,278,7,4,0,0,277,269,1,0,0,0,277,276,1,0,
        0,0,278,92,1,0,0,0,279,281,7,4,0,0,280,279,1,0,0,0,281,284,1,0,0,
        0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,
        0,285,287,5,46,0,0,286,282,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,
        0,288,290,7,4,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,
        0,291,292,1,0,0,0,292,308,1,0,0,0,293,295,7,4,0,0,294,293,1,0,0,
        0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,305,1,0,0,
        0,298,302,5,46,0,0,299,301,7,4,0,0,300,299,1,0,0,0,301,304,1,0,0,
        0,302,300,1,0,0,0,302,303,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,
        0,305,298,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,286,1,0,0,
        0,307,294,1,0,0,0,308,94,1,0,0,0,309,311,5,39,0,0,310,312,5,92,0,
        0,311,312,1,0,0,0,311,310,1,0,0,0,312,313,1,0,0,0,313,314,9,0,0,
        0,314,315,5,39,0,0,315,96,1,0,0,0,316,318,7,5,0,0,317,316,1,0,0,
        0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,
        0,321,322,6,48,0,0,322,98,1,0,0,0,17,0,245,257,261,264,266,273,277,
        282,286,291,296,302,305,307,311,319,1,6,0,0
    ]

class expressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    MULTILINE = 43
    SINGLECOMMENT = 44
    IDENTIFIER = 45
    INT = 46
    FLOAT = 47
    CHAR = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include <stdio.h>'", "'('", "')'", "'{'", "'}'", "';'", "'typedef'", 
            "'printf'", "'\"'", "'%s'", "'%d'", "'%x'", "'%f'", "'%c'", 
            "','", "'const'", "'int'", "'char'", "'float'", "'*'", "'='", 
            "'++'", "'--'", "'&'", "'+'", "'-'", "'~'", "'!'", "'/'", "'%'", 
            "'>>'", "'<<'", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", 
            "'^'", "'|'", "'&&'", "'||'" ]

    symbolicNames = [ "<INVALID>",
            "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", "INT", "FLOAT", 
            "CHAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "MULTILINE", "SINGLECOMMENT", 
                  "IDENTIFIER", "INT", "FLOAT", "CHAR", "WS" ]

    grammarFileName = "expression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


