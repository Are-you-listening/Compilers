# Generated from /home/tibov/Desktop/universiteit/bachlor-2/Compilers/Project/Compilers/grammar/expression.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,253,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,189,
        8,35,10,35,12,35,192,9,35,1,36,3,36,195,8,36,1,36,5,36,198,8,36,
        10,36,12,36,201,9,36,1,37,1,37,5,37,205,8,37,10,37,12,37,208,9,37,
        1,37,3,37,211,8,37,1,38,5,38,214,8,38,10,38,12,38,217,9,38,1,38,
        3,38,220,8,38,1,38,4,38,223,8,38,11,38,12,38,224,1,38,4,38,228,8,
        38,11,38,12,38,229,1,38,1,38,5,38,234,8,38,10,38,12,38,237,9,38,
        3,38,239,8,38,3,38,241,8,38,1,39,1,39,1,39,1,39,1,40,4,40,248,8,
        40,11,40,12,40,249,1,40,1,40,0,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,1,0,6,1,0,10,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,264,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,
        83,1,0,0,0,3,86,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,
        95,1,0,0,0,13,97,1,0,0,0,15,99,1,0,0,0,17,107,1,0,0,0,19,113,1,0,
        0,0,21,117,1,0,0,0,23,122,1,0,0,0,25,128,1,0,0,0,27,130,1,0,0,0,
        29,132,1,0,0,0,31,135,1,0,0,0,33,138,1,0,0,0,35,140,1,0,0,0,37,142,
        1,0,0,0,39,144,1,0,0,0,41,146,1,0,0,0,43,148,1,0,0,0,45,150,1,0,
        0,0,47,152,1,0,0,0,49,155,1,0,0,0,51,158,1,0,0,0,53,160,1,0,0,0,
        55,162,1,0,0,0,57,165,1,0,0,0,59,168,1,0,0,0,61,171,1,0,0,0,63,174,
        1,0,0,0,65,176,1,0,0,0,67,178,1,0,0,0,69,181,1,0,0,0,71,184,1,0,
        0,0,73,194,1,0,0,0,75,210,1,0,0,0,77,240,1,0,0,0,79,242,1,0,0,0,
        81,247,1,0,0,0,83,84,5,47,0,0,84,85,5,42,0,0,85,2,1,0,0,0,86,87,
        5,42,0,0,87,88,5,47,0,0,88,4,1,0,0,0,89,90,5,40,0,0,90,6,1,0,0,0,
        91,92,5,41,0,0,92,8,1,0,0,0,93,94,5,123,0,0,94,10,1,0,0,0,95,96,
        5,125,0,0,96,12,1,0,0,0,97,98,5,59,0,0,98,14,1,0,0,0,99,100,5,116,
        0,0,100,101,5,121,0,0,101,102,5,112,0,0,102,103,5,101,0,0,103,104,
        5,100,0,0,104,105,5,101,0,0,105,106,5,102,0,0,106,16,1,0,0,0,107,
        108,5,99,0,0,108,109,5,111,0,0,109,110,5,110,0,0,110,111,5,115,0,
        0,111,112,5,116,0,0,112,18,1,0,0,0,113,114,5,105,0,0,114,115,5,110,
        0,0,115,116,5,116,0,0,116,20,1,0,0,0,117,118,5,99,0,0,118,119,5,
        104,0,0,119,120,5,97,0,0,120,121,5,114,0,0,121,22,1,0,0,0,122,123,
        5,102,0,0,123,124,5,108,0,0,124,125,5,111,0,0,125,126,5,97,0,0,126,
        127,5,116,0,0,127,24,1,0,0,0,128,129,5,42,0,0,129,26,1,0,0,0,130,
        131,5,61,0,0,131,28,1,0,0,0,132,133,5,43,0,0,133,134,5,43,0,0,134,
        30,1,0,0,0,135,136,5,45,0,0,136,137,5,45,0,0,137,32,1,0,0,0,138,
        139,5,38,0,0,139,34,1,0,0,0,140,141,5,43,0,0,141,36,1,0,0,0,142,
        143,5,45,0,0,143,38,1,0,0,0,144,145,5,126,0,0,145,40,1,0,0,0,146,
        147,5,33,0,0,147,42,1,0,0,0,148,149,5,47,0,0,149,44,1,0,0,0,150,
        151,5,37,0,0,151,46,1,0,0,0,152,153,5,62,0,0,153,154,5,62,0,0,154,
        48,1,0,0,0,155,156,5,60,0,0,156,157,5,60,0,0,157,50,1,0,0,0,158,
        159,5,60,0,0,159,52,1,0,0,0,160,161,5,62,0,0,161,54,1,0,0,0,162,
        163,5,62,0,0,163,164,5,61,0,0,164,56,1,0,0,0,165,166,5,60,0,0,166,
        167,5,61,0,0,167,58,1,0,0,0,168,169,5,61,0,0,169,170,5,61,0,0,170,
        60,1,0,0,0,171,172,5,33,0,0,172,173,5,61,0,0,173,62,1,0,0,0,174,
        175,5,94,0,0,175,64,1,0,0,0,176,177,5,124,0,0,177,66,1,0,0,0,178,
        179,5,38,0,0,179,180,5,38,0,0,180,68,1,0,0,0,181,182,5,124,0,0,182,
        183,5,124,0,0,183,70,1,0,0,0,184,185,5,47,0,0,185,186,5,47,0,0,186,
        190,1,0,0,0,187,189,8,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,
        188,1,0,0,0,190,191,1,0,0,0,191,72,1,0,0,0,192,190,1,0,0,0,193,195,
        7,1,0,0,194,193,1,0,0,0,195,199,1,0,0,0,196,198,7,2,0,0,197,196,
        1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,74,1,
        0,0,0,201,199,1,0,0,0,202,206,7,3,0,0,203,205,7,4,0,0,204,203,1,
        0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,211,1,
        0,0,0,208,206,1,0,0,0,209,211,7,4,0,0,210,202,1,0,0,0,210,209,1,
        0,0,0,211,76,1,0,0,0,212,214,7,4,0,0,213,212,1,0,0,0,214,217,1,0,
        0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,215,1,0,
        0,0,218,220,5,46,0,0,219,215,1,0,0,0,219,220,1,0,0,0,220,222,1,0,
        0,0,221,223,7,4,0,0,222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,
        0,0,224,225,1,0,0,0,225,241,1,0,0,0,226,228,7,4,0,0,227,226,1,0,
        0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,238,1,0,
        0,0,231,235,5,46,0,0,232,234,7,4,0,0,233,232,1,0,0,0,234,237,1,0,
        0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,239,1,0,0,0,237,235,1,0,
        0,0,238,231,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,219,1,0,
        0,0,240,227,1,0,0,0,241,78,1,0,0,0,242,243,5,39,0,0,243,244,9,0,
        0,0,244,245,5,39,0,0,245,80,1,0,0,0,246,248,7,5,0,0,247,246,1,0,
        0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,251,1,0,
        0,0,251,252,6,40,0,0,252,82,1,0,0,0,15,0,190,194,197,199,206,210,
        215,219,224,229,235,238,240,249,1,6,0,0
    ]

class expressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    SINGLECOMMENT = 36
    IDENTIFIER = 37
    INT = 38
    FLOAT = 39
    CHAR = 40
    WS = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'/*'", "'*/'", "'('", "')'", "'{'", "'}'", "';'", "'typedef'", 
            "'const'", "'int'", "'char'", "'float'", "'*'", "'='", "'++'", 
            "'--'", "'&'", "'+'", "'-'", "'~'", "'!'", "'/'", "'%'", "'>>'", 
            "'<<'", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'^'", 
            "'|'", "'&&'", "'||'" ]

    symbolicNames = [ "<INVALID>",
            "SINGLECOMMENT", "IDENTIFIER", "INT", "FLOAT", "CHAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "SINGLECOMMENT", "IDENTIFIER", 
                  "INT", "FLOAT", "CHAR", "WS" ]

    grammarFileName = "expression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


