# Generated from /home/tibov/Desktop/universiteit/bachlor-2/Compilers/Project/Compilers/grammar/expression.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,305,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,
        20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,
        32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
        37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,229,
        8,40,10,40,12,40,232,9,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,5,41,
        241,8,41,10,41,12,41,244,9,41,1,42,3,42,247,8,42,1,42,5,42,250,8,
        42,10,42,12,42,253,9,42,1,43,1,43,5,43,257,8,43,10,43,12,43,260,
        9,43,1,43,3,43,263,8,43,1,44,5,44,266,8,44,10,44,12,44,269,9,44,
        1,44,3,44,272,8,44,1,44,4,44,275,8,44,11,44,12,44,276,1,44,4,44,
        280,8,44,11,44,12,44,281,1,44,1,44,5,44,286,8,44,10,44,12,44,289,
        9,44,3,44,291,8,44,3,44,293,8,44,1,45,1,45,1,45,1,45,1,46,4,46,300,
        8,46,11,46,12,46,301,1,46,1,46,1,230,0,47,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,1,0,6,1,0,10,10,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,
        0,48,57,3,0,9,10,13,13,32,32,317,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,
        0,3,97,1,0,0,0,5,99,1,0,0,0,7,101,1,0,0,0,9,103,1,0,0,0,11,105,1,
        0,0,0,13,113,1,0,0,0,15,120,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,
        0,21,132,1,0,0,0,23,137,1,0,0,0,25,142,1,0,0,0,27,147,1,0,0,0,29,
        153,1,0,0,0,31,157,1,0,0,0,33,162,1,0,0,0,35,168,1,0,0,0,37,170,
        1,0,0,0,39,172,1,0,0,0,41,175,1,0,0,0,43,178,1,0,0,0,45,180,1,0,
        0,0,47,182,1,0,0,0,49,184,1,0,0,0,51,186,1,0,0,0,53,188,1,0,0,0,
        55,190,1,0,0,0,57,192,1,0,0,0,59,195,1,0,0,0,61,198,1,0,0,0,63,200,
        1,0,0,0,65,202,1,0,0,0,67,205,1,0,0,0,69,208,1,0,0,0,71,211,1,0,
        0,0,73,214,1,0,0,0,75,216,1,0,0,0,77,218,1,0,0,0,79,221,1,0,0,0,
        81,224,1,0,0,0,83,236,1,0,0,0,85,246,1,0,0,0,87,262,1,0,0,0,89,292,
        1,0,0,0,91,294,1,0,0,0,93,299,1,0,0,0,95,96,5,40,0,0,96,2,1,0,0,
        0,97,98,5,41,0,0,98,4,1,0,0,0,99,100,5,123,0,0,100,6,1,0,0,0,101,
        102,5,125,0,0,102,8,1,0,0,0,103,104,5,59,0,0,104,10,1,0,0,0,105,
        106,5,116,0,0,106,107,5,121,0,0,107,108,5,112,0,0,108,109,5,101,
        0,0,109,110,5,100,0,0,110,111,5,101,0,0,111,112,5,102,0,0,112,12,
        1,0,0,0,113,114,5,112,0,0,114,115,5,114,0,0,115,116,5,105,0,0,116,
        117,5,110,0,0,117,118,5,116,0,0,118,119,5,102,0,0,119,14,1,0,0,0,
        120,121,5,34,0,0,121,122,5,37,0,0,122,123,5,115,0,0,123,124,5,34,
        0,0,124,16,1,0,0,0,125,126,5,44,0,0,126,18,1,0,0,0,127,128,5,34,
        0,0,128,129,5,37,0,0,129,130,5,100,0,0,130,131,5,34,0,0,131,20,1,
        0,0,0,132,133,5,34,0,0,133,134,5,37,0,0,134,135,5,120,0,0,135,136,
        5,34,0,0,136,22,1,0,0,0,137,138,5,34,0,0,138,139,5,37,0,0,139,140,
        5,102,0,0,140,141,5,34,0,0,141,24,1,0,0,0,142,143,5,34,0,0,143,144,
        5,37,0,0,144,145,5,99,0,0,145,146,5,34,0,0,146,26,1,0,0,0,147,148,
        5,99,0,0,148,149,5,111,0,0,149,150,5,110,0,0,150,151,5,115,0,0,151,
        152,5,116,0,0,152,28,1,0,0,0,153,154,5,105,0,0,154,155,5,110,0,0,
        155,156,5,116,0,0,156,30,1,0,0,0,157,158,5,99,0,0,158,159,5,104,
        0,0,159,160,5,97,0,0,160,161,5,114,0,0,161,32,1,0,0,0,162,163,5,
        102,0,0,163,164,5,108,0,0,164,165,5,111,0,0,165,166,5,97,0,0,166,
        167,5,116,0,0,167,34,1,0,0,0,168,169,5,42,0,0,169,36,1,0,0,0,170,
        171,5,61,0,0,171,38,1,0,0,0,172,173,5,43,0,0,173,174,5,43,0,0,174,
        40,1,0,0,0,175,176,5,45,0,0,176,177,5,45,0,0,177,42,1,0,0,0,178,
        179,5,38,0,0,179,44,1,0,0,0,180,181,5,43,0,0,181,46,1,0,0,0,182,
        183,5,45,0,0,183,48,1,0,0,0,184,185,5,126,0,0,185,50,1,0,0,0,186,
        187,5,33,0,0,187,52,1,0,0,0,188,189,5,47,0,0,189,54,1,0,0,0,190,
        191,5,37,0,0,191,56,1,0,0,0,192,193,5,62,0,0,193,194,5,62,0,0,194,
        58,1,0,0,0,195,196,5,60,0,0,196,197,5,60,0,0,197,60,1,0,0,0,198,
        199,5,60,0,0,199,62,1,0,0,0,200,201,5,62,0,0,201,64,1,0,0,0,202,
        203,5,62,0,0,203,204,5,61,0,0,204,66,1,0,0,0,205,206,5,60,0,0,206,
        207,5,61,0,0,207,68,1,0,0,0,208,209,5,61,0,0,209,210,5,61,0,0,210,
        70,1,0,0,0,211,212,5,33,0,0,212,213,5,61,0,0,213,72,1,0,0,0,214,
        215,5,94,0,0,215,74,1,0,0,0,216,217,5,124,0,0,217,76,1,0,0,0,218,
        219,5,38,0,0,219,220,5,38,0,0,220,78,1,0,0,0,221,222,5,124,0,0,222,
        223,5,124,0,0,223,80,1,0,0,0,224,225,5,47,0,0,225,226,5,42,0,0,226,
        230,1,0,0,0,227,229,9,0,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,
        231,1,0,0,0,230,228,1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,
        234,5,42,0,0,234,235,5,47,0,0,235,82,1,0,0,0,236,237,5,47,0,0,237,
        238,5,47,0,0,238,242,1,0,0,0,239,241,8,0,0,0,240,239,1,0,0,0,241,
        244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,84,1,0,0,0,244,242,
        1,0,0,0,245,247,7,1,0,0,246,245,1,0,0,0,247,251,1,0,0,0,248,250,
        7,2,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,
        1,0,0,0,252,86,1,0,0,0,253,251,1,0,0,0,254,258,7,3,0,0,255,257,7,
        4,0,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,
        0,0,0,259,263,1,0,0,0,260,258,1,0,0,0,261,263,7,4,0,0,262,254,1,
        0,0,0,262,261,1,0,0,0,263,88,1,0,0,0,264,266,7,4,0,0,265,264,1,0,
        0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,
        0,0,269,267,1,0,0,0,270,272,5,46,0,0,271,267,1,0,0,0,271,272,1,0,
        0,0,272,274,1,0,0,0,273,275,7,4,0,0,274,273,1,0,0,0,275,276,1,0,
        0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,293,1,0,0,0,278,280,7,4,
        0,0,279,278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,
        0,0,282,290,1,0,0,0,283,287,5,46,0,0,284,286,7,4,0,0,285,284,1,0,
        0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,291,1,0,
        0,0,289,287,1,0,0,0,290,283,1,0,0,0,290,291,1,0,0,0,291,293,1,0,
        0,0,292,271,1,0,0,0,292,279,1,0,0,0,293,90,1,0,0,0,294,295,5,39,
        0,0,295,296,9,0,0,0,296,297,5,39,0,0,297,92,1,0,0,0,298,300,7,5,
        0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,0,301,302,1,0,
        0,0,302,303,1,0,0,0,303,304,6,46,0,0,304,94,1,0,0,0,16,0,230,242,
        246,249,251,258,262,267,271,276,281,287,290,292,301,1,6,0,0
    ]

class expressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    MULTILINE = 41
    SINGLECOMMENT = 42
    IDENTIFIER = 43
    INT = 44
    FLOAT = 45
    CHAR = 46
    WS = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'typedef'", "'printf'", 
            "'\"%s\"'", "','", "'\"%d\"'", "'\"%x\"'", "'\"%f\"'", "'\"%c\"'", 
            "'const'", "'int'", "'char'", "'float'", "'*'", "'='", "'++'", 
            "'--'", "'&'", "'+'", "'-'", "'~'", "'!'", "'/'", "'%'", "'>>'", 
            "'<<'", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'^'", 
            "'|'", "'&&'", "'||'" ]

    symbolicNames = [ "<INVALID>",
            "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", "INT", "FLOAT", 
            "CHAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "MULTILINE", "SINGLECOMMENT", "IDENTIFIER", 
                  "INT", "FLOAT", "CHAR", "WS" ]

    grammarFileName = "expression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


